import os

#### Quick documentation ####
##Files needed by pipeline:
## - GRChxx.xx.fa
## - GRChxx.xx.fa.fai
## - GRChxx.xx.dict
## - dbSNP_vxxx_xxxx_noCHR.vcf - use remove_chr.py on vcf downloaded from dbSNP FTP site
## - Bed file containing exome captured regions - *.bed
## - config.py - python file containing variables to input in the pipeline. All variables must be declared before
#running the pipeline
##Program needed by pipeline:
## - picard.jar -
## - GenomeAnalysisTK.jar -
## - gatk - GATK4 for MuTect2

#########################
##### SCons Settings ####
#########################

vars = Variables("/working/config.py")

vars.Add('reference', 'The genome reference file',"reference.fa")
vars.Add('processors', 'Number of CPUs to be used', "2")
vars.Add('dbsnpVCF','The dbSNP VCF',"dbsnp.vcf.gz")
vars.Add('cosmic','The Cosmic VCF',"cosmic.vcf")
vars.Add('exomeRegions',"The bed file containing exome regions","small.bed")
vars.Add('tumor',"Tumor sample","")
vars.Add('normal',"Normal sample","")
vars.Add('mutect','The path to mutect',"/tmp/mutect-1.1.7.jar")
vars.Add('contamination','Computation of predicted contamination in tumor sample by CalculateContamination of GATK4 (y/n)',"n")
vars.Add('gatk4','The path to GATK4',"/tmp/gatk4/gatk")
vars.Add('javaOptions','Options to run java',"4")
vars.Add('maxPopulationAlleleFrequency',"Maximum population allele frequency of sites to consider for GetPileupSummaries in GATK4","0.2")
vars.Add('minPopulationAlleleFrequency',"Minimum population allele frequency of sites to consider for GetPileupSummaries in GATK4","0")
vars.Add('gnomadVCF',"The gnomad.exomes.rx.x.x.sites.pass.vcf","gnomad.vcf")
vars.Add('variantCallers',"Variant callers to be used (mutect,mutect2,strelka2)","mutect,mutect2,strelka2")


env = Environment(ENV = os.environ, SHELL = '/bin/bash', variables = vars)
env.AppendENVPath('PATH', os.getcwd())
Decider('timestamp-newer')

####################
##### Arguments ####
####################

reference = ARGUMENTS.get("reference", env["reference"])
reference = "/genome/" + reference

processors = ARGUMENTS.get("processors", env["processors"])

dbsnpVCF = ARGUMENTS.get("dbsnpVCF",env["dbsnpVCF"])
dbsnpVCF = "/dbsnp/" + dbsnpVCF

cosmic = ARGUMENTS.get("cosmic",env["cosmic"])
cosmic = "/cosmic/" + cosmic

exomeRegions = ARGUMENTS.get("exomeRegions",env["exomeRegions"])
exomeRegions = "/bed/" + exomeRegions

tumor = ARGUMENTS.get("tumor",env["tumor"])

normal = ARGUMENTS.get("normal",env["normal"])

mutect = ARGUMENTS.get("mutect",env["mutect"])

contamination = ARGUMENTS.get("contamination",env["contamination"])

gatk4 = ARGUMENTS.get("gatk4",env["gatk4"])

javaOptions = ARGUMENTS.get("javaOptions",env["javaOptions"])

javaOptions = "-Xmx"+str(javaOptions)+"g"

maxPopulationAlleleFrequency = ARGUMENTS.get("maxPopulationAlleleFrequency",env["maxPopulationAlleleFrequency"])

minPopulationAlleleFrequency = ARGUMENTS.get("minPopulationAlleleFrequency",env["minPopulationAlleleFrequency"])

gnomadVCF = ARGUMENTS.get("gnomadVCF",env["gnomadVCF"])
gnomadVCF = "/gnomad/" + gnomadVCF

variantCallers = ARGUMENTS.get("variantCallers",env["variantCallers"])
variantCallersList = variantCallers.split(",")


############################################
#### Calculate contamination with GATK4 ####
############################################

if contamination == "y" or contamination == "yes":
    getPileupSummariesCMD = "${SOURCES[0]} GetPileupSummaries -I ${SOURCES[1]}/07_recalibrated.bam -L ${SOURCES[2]} -V ${SOURCES[3]} -O Variants/Mutect2/${SOURCES[1]}_${SOURCES[4]}/00_pileups.table" + " -max-af {} -min-af {}".format(maxPopulationAlleleFrequency,minPopulationAlleleFrequency)
    getPileupSummaries = env.Command(["Variants/Mutect2/{}_{}/00_pileups.table".format(tumor,normal)],[gatk4,tumor,exomeRegions,gnomadVCF,normal],getPileupSummariesCMD)

    calculateContaminationCMD = "${SOURCES[0]} CalculateContamination -I ${SOURCES[1]} -O $TARGET"
    calculateContamination = env.Command(["Variants/Mutect2/{}_{}/00_contamination.table".format(tumor,normal)],[gatk4,getPileupSummaries],calculateContaminationCMD)

#####################################
#### Variant Calling with MuTect ####
#####################################

if "mutect" in variantCallersList:
    muTectCMD = "/tmp/java-7-oracle/bin/java " + javaOptions + " -jar ${SOURCES[0]} --analysis_type MuTect --reference_sequence ${SOURCES[1]} --dbsnp ${SOURCES[2]} --cosmic ${SOURCES[3]} --intervals ${SOURCES[4]} --input_file:normal ${SOURCES[5]}/07_recalibrated.bam --input_file:tumor ${SOURCES[6]}/07_recalibrated.bam --out ${TARGETS[0]} --coverage_file ${TARGETS[1]} --vcf ${TARGETS[2]}"
    muTect = env.Command(["Variants/Mutect/{}_{}/01_variants.txt".format(tumor,normal),"Variants/Mutect/{}_{}/01_coverage.wig.txt".format(tumor,normal),"Variants/Mutect/{}_{}/01.vcf".format(tumor,normal)],[mutect,reference,dbsnpVCF,cosmic,exomeRegions,normal,tumor],muTectCMD)



